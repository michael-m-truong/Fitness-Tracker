type Exercise {
    id: ID!
    name: String!
    description: String
    muscleGroup: String!
    user: User!
    equipment: Equipment  #use when want to add to exercise_equipment
}

type Equipment {
    id: ID!
    name: String!
    user: User!
}

type Workout {
    id: ID!
    name: String!
    description: String
    user: User!
    exercise: [Exercise] #use when want to add exercise to workout
}

type User {
    id: ID!
    name: String!
}

# TODO: add query equipment, add equipment to exercise, add sets reps to workout
type Query {
    exercises: [Exercise!]!
    workouts: [Workout!]!
}

# for inputs, server will handle id and user fields

input NewExercise {
    name: String!
    description: String
    muscleGroup: String!  #create a type in postgresql?
    equipment: EquipmentInput  #use when want to add to exercise_equipment
}

input EquipmentInput {
  name: String!
  # Any other fields related to Equipment that you want to include as input
}

input NewEquipment {
    name: String!
}

input NewWorkout {
    name: String!
    description: String
    exerciseIds: [Int!]! #use when want to add exercise to workout
}

input ExerciseInput {
    name: String!
    description: String
    muscleGroup: String!  #create a type in postgresql?
    equipment: EquipmentInput  #use when want to add to exercise_equipment
}

input RefreshTokenInput{
    token: String!
}

input NewUser {
    username: String!
    password: String!
}

input Login {
    username: String!
    password: String!
}

type Mutation {
    createExercise(input: NewExercise!): Exercise!
    createEquipment(input: NewEquipment!): Equipment!
    createWorkout(input: NewWorkout!): Workout!
    createUser(input: NewUser!): String!
    login(input: Login!): String!
    # we'll talk about this in authentication section
    refreshToken(input: RefreshTokenInput!): String!
}