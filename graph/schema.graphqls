type Exercise {
    id: ID!
    name: String!
    description: String
    muscle_group: String
    user: User!
    equipment: Equipment  #use when want to add to exercise_equipment
}

type Equipment {
    id: ID!
    name: String!
    user: User!
}

type Workout {
    id: ID!
    title: String!
    user: User!
    exercise: [Exercise] #use when want to add exercise to workout
}

type User {
    id: ID!
    name: String!
}

type Query {
    links: [Link!]!
}

# for inputs, server will handle id and user fields

input NewExercise {
    name: String!
    description: String
    muscle_group: String!  #create a type in postgresql?
    equipment: Equipment  #use when want to add to exercise_equipment
}

input NewEquipment {
    name: String!
}

input NewWorkout {
    title: String!
    exercise: [Exercise] #use when want to add exercise to workout
}

input RefreshTokenInput{
    token: String!
}

input NewUser {
    username: String!
    password: String!
}

input Login {
    username: String!
    password: String!
}

type Mutation {
    createLink(input: NewLink!): Link!
    createUser(input: NewUser!): String!
    login(input: Login!): String!
    # we'll talk about this in authentication section
    refreshToken(input: RefreshTokenInput!): String!
}